plugins {
    id 'java'
    id 'io.quarkus'
}

println "Starting gradle build."

def githubToken = ({
    if("$System.env.GH_PACKAGES_PAT" != "null"){
        println "Using PAT from environment variables"
        return "$System.env.GH_PACKAGES_PAT"
    } else if (project.hasProperty("GITHUB_TOKEN")) {
        println "Using Github token from project properties: " + project.getProperty("GITHUB_TOKEN")
        return project.getProperty("GITHUB_TOKEN")
    } else if("$System.env.GITHUB_TOKEN" != "null"){
        println "Using Github token from environment variables"
        return "$System.env.GITHUB_TOKEN"
    } else {
        //This block is required for building from IntelliJ because IntelliJ does not load environment variables
        println "Trying to get Github token from ~/.m2/settings.xml"
        def settingsFile = new File(System.getProperty( "user.home" ), ".m2/settings.xml")
        def settings = new XmlSlurper().parse(settingsFile)
        for (entry in settings."servers"."server") {
            if ( entry."id".text() == "github" ) {
                return entry.password.text()
            }
        }
    }
})()

repositories {
    mavenCentral()
    mavenLocal()

    maven {
        credentials {
            username ""
            password githubToken
        }
        url "https://maven.pkg.github.com/worldy-io/sockiopath"
    }
}

dependencies {
    implementation 'org.apache.commons:commons-lang3:3.12.0'

    implementation 'io.quarkus:quarkus-vertx'
    implementation 'io.quarkus:quarkus-spring-di'
    implementation enforcedPlatform("${quarkusPlatformGroupId}:${quarkusPlatformArtifactId}:${quarkusPlatformVersion}")
    implementation enforcedPlatform("${quarkusPlatformGroupId}:quarkus-camel-bom:${quarkusPlatformVersion}")
    implementation 'io.quarkus:quarkus-grpc'
    implementation 'org.apache.camel.quarkus:camel-quarkus-netty'
    implementation 'io.quarkus:quarkus-arc'
    implementation 'io.worldy:sockiopath:0.0.1'

    testImplementation 'io.quarkus:quarkus-junit5'

}

group 'com.kvara'
version '1.0.0-SNAPSHOT'

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

compileJava {
    options.encoding = 'UTF-8'
    options.compilerArgs << '-parameters'
}

compileTestJava {
    options.encoding = 'UTF-8'
}
