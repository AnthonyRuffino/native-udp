plugins {
    id 'java'
    id 'io.quarkus'
    id 'checkstyle'
    id 'jacoco'
}

println "Starting gradle build."

def githubToken = ({
    if (project.hasProperty("GITHUB_TOKEN")) {
        println "Using Github token from project properties..."
        return project.getProperty("GITHUB_TOKEN")
    } else if ("$System.env.GITHUB_TOKEN" != "null") {
        println "Using Github token from environment variables..."
        return "$System.env.GITHUB_TOKEN"
    } else {
        //This block is required for building from IntelliJ because IntelliJ does not load environment variables
        println "Trying to get Github token from ~/.m2/settings.xml ..."
        def settingsFile = new File(System.getProperty("user.home"), ".m2/settings.xml")
        def settings = new XmlSlurper().parse(settingsFile)
        for (entry in settings."servers"."server") {
            if (entry."id".text() == "github") {
                return entry.password.text()
            }
        }
    }
})()

repositories {
    mavenCentral()
    mavenLocal()

    maven {
        credentials {
            username ""
            password githubToken
        }
        url "https://maven.pkg.github.com/worldy-io/sockiopath"
    }
}

dependencies {
    implementation 'io.worldy:sockiopath:0.0.13'
    implementation 'org.apache.commons:commons-lang3:3.12.0'
    implementation 'io.quarkus:quarkus-vertx'
    implementation 'io.quarkus:quarkus-spring-di'
    implementation enforcedPlatform("${quarkusPlatformGroupId}:${quarkusPlatformArtifactId}:${quarkusPlatformVersion}")
    implementation enforcedPlatform("${quarkusPlatformGroupId}:quarkus-camel-bom:${quarkusPlatformVersion}")
    implementation 'io.quarkus:quarkus-grpc'
    implementation 'org.apache.camel.quarkus:camel-quarkus-netty'
    implementation 'io.quarkus:quarkus-arc'

    testImplementation 'io.quarkus:quarkus-test-vertx:2.8.3.Final'

    testImplementation 'io.quarkus:quarkus-junit5'
    testImplementation 'org.hamcrest:java-hamcrest:2.0.0.0'
    testImplementation 'io.quarkus:quarkus-junit5-mockito:2.13.1.Final'


}

//configurations.all {
//    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
//}

group 'com.kvara'
version '1.0.0-SNAPSHOT'

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

test {
    finalizedBy jacocoTestReport
}

compileJava {
    options.encoding = 'UTF-8'
    options.compilerArgs << '-parameters'
}

compileTestJava {
    options.encoding = 'UTF-8'
}

checkstyle {
    configFile = project(':').file('config/checkstyle/checkstyle.xml')
    configProperties = ["suppressionFile": project(':').file('config/checkstyle/suppressions.xml')]
}

tasks.withType(Checkstyle) {
    reports {
        xml.required = false
        html.required = true
    }
    dependsOn(tasks.compileQuarkusTestGeneratedSourcesJava)
    dependsOn(tasks.jacocoTestCoverageVerification)
}

jacoco {
    toolVersion = "0.8.8"
}

def jacocoInclusions = [
        '**/com/kvara/io/**'
];

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }
    getExecutionData().setFrom(fileTree(buildDir).include('/jacoco/*.exec'));
    afterEvaluate {
        classDirectories.from = files(classDirectories.files.collect {
            fileTree(dir: it, include: jacocoInclusions)
        })
    }
}

jacocoTestCoverageVerification {
    dependsOn jacocoTestReport
    afterEvaluate {
        classDirectories.from = files(classDirectories.files.collect {
            fileTree(dir: it, include: jacocoInclusions)
        })
    }
    violationRules {
        rule {
            enabled = true
            failOnViolation = true
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 1.0
            }
        }
        rule {
            enabled = true
            failOnViolation = true
            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 1.0
            }
        }
    }
}
